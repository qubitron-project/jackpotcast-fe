{"mappings":"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","sources":["src/index.ts","src/utils/fs.ts","src/utils/git.ts","src/utils/cmd.ts","src/utils/logger.ts","src/utils/markdown.ts","src/utils/alt.ts","src/utils/table-of-contents.ts","src/types.ts"],"sourcesContent":["import { resolve, relative } from 'path';\nimport { Config, File, NextMarkdownFile, NextMarkdownProps, YAMLFrontMatter } from './types';\nimport { pathToContent, flatFiles, generateNextmd, readFileSyncUTF8, isDraft } from './utils/fs';\nimport { treeContentRepo } from './utils/git';\nimport { consoleLogNextmd } from './utils/logger';\nimport { extractFrontMatter, readMarkdownFile } from './utils/markdown';\n\n/**\n * @param config The config for the next-markdown module.\n * @returns The next markdown module ready-to-use.\n */\nconst NextMarkdown = <T extends YAMLFrontMatter, U extends YAMLFrontMatter = T>(config: Config) => {\n  const isContentFetchedFromRemote = config.contentGitRepo !== undefined;\n  const finalPathToContent = pathToContent(config.pathToContent, isContentFetchedFromRemote);\n  const relativeToAbsolute = (filePath: string) => resolve(finalPathToContent, filePath);\n  const absoluteToRelative = (filePath: string) => relative(finalPathToContent, filePath);\n\n  const getAllFiles = async () => {\n    const filterFileFinal = async (file: File) =>\n      config.filterFile\n        ? (async (fn: typeof config.filterFile) => {\n            const rawdata = readFileSyncUTF8(relativeToAbsolute(file.path));\n            const { frontMatter } = extractFrontMatter(rawdata);\n            return fn(file, frontMatter);\n          })(config.filterFile)\n        : file.name !== 'README.md';\n\n    const tree = await treeContentRepo(\n      relativeToAbsolute('.'),\n      absoluteToRelative,\n      config.debug ?? false,\n      config.contentGitRepo,\n    );\n\n    const allFiles = await Promise.all(\n      flatFiles(tree).map(async (e) => ({ file: e, isIncluded: await filterFileFinal(e) })),\n    );\n\n    if (config.debug) {\n      consoleLogNextmd('Files:', JSON.stringify(allFiles));\n    }\n\n    return allFiles.filter((e) => e.isIncluded).map((e) => e.file);\n  };\n\n  const getStaticPropsForNextmd = async <R extends YAMLFrontMatter, S extends YAMLFrontMatter = R>(\n    nextmd: string[],\n  ): Promise<{ props: NextMarkdownProps<R, S> }> => {\n    const allFiles = await getAllFiles();\n\n    const file = allFiles.find((e) => JSON.stringify(nextmd) === JSON.stringify(generateNextmd(e.path)));\n\n    if (file === undefined) {\n      throw Error(`Could not find markdown file at path \"${nextmd.join('/')}\"`);\n    }\n\n    const pageData = await readMarkdownFile<R>(relativeToAbsolute(file.path), config);\n\n    const subPaths = allFiles\n      .filter((e) => e !== file) // remove itself\n      .filter((e) => isDraft(e.path) === false) // exclude draft or unpublished\n      .map((e): NextMarkdownFile<S> | null => {\n        // compare file's nextmd with the given nextmd\n        const fileNextmd = generateNextmd(e.path);\n        const parentNextmd = fileNextmd.slice(0, -1); // remove last element\n        if (JSON.stringify(nextmd) === JSON.stringify(parentNextmd)) {\n          const { frontMatter, content } = extractFrontMatter<S>(readFileSyncUTF8(relativeToAbsolute(e.path)));\n          return {\n            nextmd: fileNextmd,\n            frontMatter,\n            markdown: content,\n          };\n        } else {\n          return null;\n        }\n      })\n      .flatMap((e) => (e ? [e] : []));\n\n    return {\n      props: {\n        ...pageData,\n        nextmd,\n        subPaths,\n      },\n    };\n  };\n\n  return {\n    getStaticPaths: async () => {\n      const allFiles = await getAllFiles();\n\n      return {\n        paths: allFiles\n          .filter((e) => isDraft(e.path) === false)\n          .map((e) => ({\n            params: {\n              nextmd: generateNextmd(e.path),\n            },\n          })),\n        fallback: false, // See the \"fallback\" section below\n      };\n    },\n\n    getStaticProps: async (context: { params?: { nextmd: string[] } }): Promise<{ props: NextMarkdownProps<T, U> }> => {\n      const nextmd = context.params?.nextmd;\n\n      return getStaticPropsForNextmd<T, U>(nextmd ?? []);\n    },\n\n    getStaticPropsForNextmd,\n  };\n};\n\nexport default NextMarkdown;\nexport * from './types';\n","import fs from 'fs';\nimport { join, parse, sep } from 'path';\nimport { File, TreeObject } from '../types';\n\nexport const pathToContent = (userPathToContent: string, remote: boolean) =>\n  join(remote ? './.git/next-md' : './', userPathToContent);\n\nexport const exclude = (object: TreeObject) => {\n  if (object.type === 'file' && object.name.endsWith('.md') === false && object.name.endsWith('.mdx') === false) {\n    return true;\n  }\n\n  if (object.name === '.git') {\n    return true;\n  }\n\n  if (object.type === 'dir' && object.children.length === 0) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const treeSync = (path: string, absoluteToRelative: (path: string) => string) => {\n  const res = fs\n    .readdirSync(path)\n    .map((e) => ({ name: e, dir: path }))\n    .map(\n      (\n        (fileSystem: typeof fs) =>\n        (e): TreeObject | null => {\n          const _path = join(e.dir, e.name);\n          const isDir = fileSystem.lstatSync(_path).isDirectory();\n          if (e.name === '.git') {\n            return null; // no need to inspect recursively this\n          } else {\n            return isDir\n              ? {\n                  type: 'dir',\n                  name: e.name,\n                  path: absoluteToRelative(_path),\n                  children: treeSync(_path, absoluteToRelative),\n                }\n              : {\n                  type: 'file',\n                  name: e.name,\n                  path: absoluteToRelative(_path),\n                };\n          }\n        }\n      )(fs),\n    )\n    .flatMap((f) => (f ? [f] : []))\n    .filter((e) => exclude(e) === false);\n\n  return res;\n};\n\nexport const flatFiles = (tree: TreeObject[]): File[] => {\n  const flatRecursively = (object: TreeObject): TreeObject[] =>\n    object.type === 'dir' ? object.children.flatMap(flatRecursively) : [object];\n\n  return tree.flatMap(flatRecursively) as File[];\n};\n\nexport const generateNextmd = (relativeFilePath: string) => {\n  return relativeFilePath\n    .split(sep)\n    .map((e) => e.replace(/^_(\\s+)?/, '')) // replace the first occurence of \"_\" at the beginning of the string with \"\"\n    .map((e) => e.replace(/^\\[(.*?)\\](\\s+)?_?/, '')) // replace the first occurence of \"[whatever-you-want]+whitespaces(if-any)\" at the beginning of string with \"\"\n    .map((e, index, arr) => {\n      if (index === arr.length - 1) {\n        const lastElement = e;\n        const parsed = parse(lastElement);\n        if (parsed.name === 'index') {\n          return undefined;\n        } else {\n          return parsed.name;\n        }\n      } else {\n        return e;\n      }\n    })\n    .map((e) => e?.trim())\n    .flatMap((e) => (e ? [e] : []));\n};\n\nexport const getPostFilesFromNextmd = async (files: File[], nextmd: string[]) =>\n  files.filter((e) => parse(e.path).dir === nextmd.join('/'));\n\nexport const isMDX = (filePath: string) => filePath.endsWith('.mdx');\n\nexport const readFileSyncUTF8 = (filePath: string) => fs.readFileSync(filePath).toString('utf-8');\n\nexport const isDraft = (relativeFilePath: string) =>\n  relativeFilePath.split(sep).find((e) => e.startsWith('_')) !== undefined;\n","import fs from 'fs';\nimport { cmd } from './cmd';\nimport { treeSync } from './fs';\nimport { consoleLogNextmd } from './logger';\n\nconst pathToNextmdLastUpdate = '.git/next-md-last-update';\nconst pathToNextmdBranch = '.git/next-md-branch';\n\ntype GitRepo = {\n  remoteUrl: string;\n  branch: string;\n};\n\n/**\n * @param pathToContent Absolute path to content\n */\nexport const treeContentRepo = async (\n  pathToContent: string,\n  absoluteToRelative: (path: string) => string,\n  debug: boolean,\n  gitRepo?: GitRepo,\n) => {\n  if (gitRepo) {\n    const { remoteUrl, branch } = gitRepo;\n    if (!remoteUrl || !branch) {\n      throw Error('[nextmd] You must specify both git remote URL and branch when using `contentGitRepo`');\n    }\n\n    /**\n     * @returns The number of seconds since the last update of the git remote repo.\n     */\n    const elapsedSecondsSinceLastUpdate = () => {\n      const lastRepoUpdateTxt = fs.readFileSync(pathToNextmdLastUpdate).toString('utf-8').trim();\n      const lastUpdateMillis = parseInt(lastRepoUpdateTxt, 10);\n\n      return Date.now() - lastUpdateMillis;\n    };\n\n    /**\n     *\n     * @returns The branche name of the last git clone\n     */\n    const branchLastUpdate = () => fs.readFileSync(pathToNextmdBranch).toString('utf-8').trim();\n\n    /**\n     * Mechanism to avoid pulling the repo when `getStaticPaths` & `getStaticProps` is called.\n     *\n     * This ensures repo content is the same in `getStaticPaths` & `getStaticProps`.\n     */\n    const shouldUpdateGitRepo = () => {\n      if (fs.existsSync(pathToNextmdLastUpdate) === false || fs.existsSync(pathToNextmdBranch) === false) {\n        return 'first time fetch';\n      }\n\n      const lastBranch = branchLastUpdate();\n      if (lastBranch !== branch) {\n        return ['was', lastBranch].join(' ');\n      }\n\n      if (elapsedSecondsSinceLastUpdate() > 5 * 60 * 1000) {\n        // 5 minutes\n        return 'last update was > 5 min ago';\n      }\n\n      return null;\n    };\n\n    const shouldUpdateGitRepoReason = shouldUpdateGitRepo();\n    const logFromGit = [remoteUrl, `(Branch: ${branch})`].filter((e) => e).join(' ');\n    if (shouldUpdateGitRepoReason) {\n      consoleLogNextmd(\n        ['cloning', logFromGit, debug ? `- ${shouldUpdateGitRepoReason}` : undefined].filter((e) => e).join(' '),\n      );\n      fs.rmSync(pathToContent, { recursive: true, force: true });\n      await cmd(\n        ['git', 'clone', branch ? `-b ${branch}` : undefined, '--depth 1', remoteUrl, pathToContent]\n          .filter((e) => e)\n          .join(' '),\n      );\n      fs.writeFileSync(pathToNextmdBranch, await cmd(`git -C ${pathToContent} rev-parse --abbrev-ref HEAD`));\n      fs.writeFileSync(pathToNextmdLastUpdate, `${Date.now()}`);\n    }\n\n    consoleLogNextmd('creating page from', logFromGit);\n  } else {\n    consoleLogNextmd('creating page from', pathToContent);\n  }\n\n  return treeSync(pathToContent, absoluteToRelative);\n};\n","import { exec } from 'child_process';\n\nexport const cmd = (commandLine: string) => {\n  return new Promise<string>((resolve, reject) => {\n    exec(commandLine, (error, stdout, stderr) => {\n      if (error) {\n        reject(error);\n      }\n      resolve(stdout || stderr);\n    });\n  });\n};\n","export const consoleLogNextmd = (...args: (string | undefined | null)[]) => {\n  if (process.env.NODE_ENV === 'test') {\n    return;\n  }\n\n  args.unshift('[nextmd]');\n  console.log.apply(this, args); // tslint:disable-line:no-console\n};\n","import matter from 'gray-matter';\nimport { Root } from 'mdast';\nimport { MDXRemoteSerializeResult, SerializeOptions } from 'next-mdx-remote/dist/types';\nimport rehypeSlug from 'rehype-slug';\nimport rehypeStringify from 'rehype-stringify';\nimport remarkParse from 'remark-parse';\nimport remarkRehype from 'remark-rehype';\nimport { unified } from 'unified';\nimport { visit } from 'unist-util-visit';\nimport { MarkdownPlugins, TableOfContents, YAMLFrontMatter } from '../types';\nimport { extractDataFromAlt } from './alt';\nimport { isMDX, readFileSyncUTF8 } from './fs';\nimport { getTableOfContents } from './table-of-contents';\n\nexport const readMarkdownFile = async <T extends YAMLFrontMatter>(filePath: string, plugins: MarkdownPlugins) => {\n  const rawdata = readFileSyncUTF8(filePath);\n  const mdx = isMDX(filePath);\n\n  return await transformFileRawData<T>(rawdata, mdx ? 'mdx' : 'md', plugins, {\n    markdownToHtml,\n    mdxSerialize: (await import('next-mdx-remote/serialize')).serialize,\n    tableOfContents: getTableOfContents,\n  });\n};\n\nexport const transformFileRawData = async <T extends YAMLFrontMatter>(\n  rawdata: string,\n  type: 'md' | 'mdx',\n  plugins: MarkdownPlugins,\n  transformers: {\n    markdownToHtml: (content: string, config: MarkdownPlugins) => Promise<string>;\n    mdxSerialize: (\n      source: string,\n      { scope, mdxOptions, parseFrontmatter }?: SerializeOptions,\n    ) => Promise<MDXRemoteSerializeResult>;\n    tableOfContents: (content: string) => TableOfContents;\n  },\n) => {\n  const { frontMatter, content } = extractFrontMatter<T>(rawdata);\n\n  return {\n    frontMatter,\n    markdown: content,\n    html: type === 'md' ? await transformers.markdownToHtml(content, plugins) : null,\n    mdxSource:\n      type === 'mdx'\n        ? await transformers.mdxSerialize(content, {\n            mdxOptions: {\n              rehypePlugins: [rehypeVideos, rehypeSlug, ...(plugins.rehypePlugins || [])],\n              remarkPlugins: plugins.remarkPlugins,\n            },\n            parseFrontmatter: false,\n          })\n        : null,\n    tableOfContents: transformers.tableOfContents(content),\n  };\n};\n\nexport const extractFrontMatter = <T extends YAMLFrontMatter>(rawdata: string) => {\n  const { data, content } = matter(rawdata);\n\n  return {\n    frontMatter: data as T,\n    content,\n  };\n};\n\nexport const markdownToHtml = async (markdown: string, plugins: MarkdownPlugins) => {\n  const processor = unified().use(remarkParse);\n\n  // inject custom remark plugins\n  if (plugins.remarkPlugins) {\n    processor.use(plugins.remarkPlugins);\n  }\n\n  processor.use(remarkRehype).use(rehypeVideos).use(rehypeSlug);\n\n  // inject custom rehype plugins\n  if (plugins.rehypePlugins) {\n    processor.use(plugins.rehypePlugins);\n  }\n\n  processor.use(rehypeStringify);\n\n  const result = await processor.process(markdown);\n\n  return String(result);\n};\n\nexport const rehypeVideos = (): ((tree: Root) => void) => {\n  return (tree) => {\n    visit(tree, 'element', (node: any) => {\n      if (node.tagName === 'img' && node.properties && typeof node.properties.src === 'string') {\n        const url = node.properties.src;\n\n        if (url.includes('.mov') || url.includes('mp4')) {\n          const altData = extractDataFromAlt(node.properties.alt);\n\n          node.tagName = 'video';\n          node.properties.width = '100%';\n          node.properties.controls = true;\n\n          if (typeof altData === 'string') {\n            node.properties.alt = altData;\n          } else {\n            Object.entries(altData).forEach(([key, value]) => {\n              node.properties[key] = value;\n            });\n          }\n        }\n      }\n    });\n  };\n};\n","/**\n * If the alt is a JSON, the JSON key/value will be transfered to `node.properties`.\n *\n * For example, this markdown:\n *\n * ```md\n * ![{\"alt\":\"20211029 - edit bot demo\",\"poster\":\"https://frouo.com/poster.jpg\"}](https://frouo.com/video.mp4)\n * ```\n *\n * will generate:\n *\n * ```html\n * <video src=\"https://frouo.com/video.mp4\" alt=\"20211029 - edit bot demo\" width=\"100%\" controls poster=\"https://frouo.com/poster.jpg\"></video>\n * ```\n */\nexport const extractDataFromAlt = (alt: string) => {\n  try {\n    return JSON.parse(alt) as { [key: string]: any };\n  } catch (error) {\n    return alt;\n  }\n};\n","import slugger from 'github-slugger';\nimport { TableOfContentItem, TableOfContents } from '../types';\n\nexport const getTableOfContents = (mdContent: string) => {\n  const regexp = new RegExp(/^(###### |##### |#### |### |## |# )(.*)\\n/, 'gm');\n  const headings = [...mdContent.matchAll(regexp)];\n  const headingLevelMap = new Map<number, TableOfContentItem[]>();\n  const tableOfContents: TableOfContents = [];\n\n  if (headings.length) {\n    let currentItem: TableOfContentItem;\n    headings.forEach((heading) => {\n      const headingText = heading[2].trim();\n      const headingLevel = heading[1].trim().length as TableOfContentItem['level'];\n      const headingId = slugger.slug(headingText, false);\n\n      const tocItem: TableOfContentItem = {\n        text: headingText,\n        id: headingId,\n        level: headingLevel,\n        subItems: [],\n      };\n\n      if (!headingLevelMap.has(headingLevel)) {\n        headingLevelMap.set(headingLevel, []);\n      }\n      headingLevelMap.get(headingLevel)!.push(tocItem);\n\n      if (currentItem && currentItem.level < tocItem.level) {\n        // the level is higher than the current item, so we need to add it to the current item's subItems\n        currentItem.subItems.push(tocItem);\n      } else {\n        // the level is lower or equal the the current one, we need to find the nearest upper heading\n\n        for (let i = headingLevel - 1; i >= 0; i--) {\n          if (i === 0) {\n            // no upper heading found, push it to the root of the ToC\n            tableOfContents.push(tocItem);\n            break;\n          } else {\n            const headingLevels = headingLevelMap.get(i);\n            if (headingLevels) {\n              const lastLevelIndex = headingLevels.length - 1;\n              headingLevels[lastLevelIndex].subItems.push(tocItem);\n              break;\n            }\n          }\n        }\n      }\n\n      currentItem = tocItem;\n    });\n  }\n\n  return tableOfContents;\n};\n","// -----------\n// Types\n// -----------\n\nimport { MDXRemoteSerializeResult } from 'next-mdx-remote';\nimport { PluggableList } from 'unified';\n\nexport type MarkdownPlugins = {\n  /**\n   * Pass a list of remark plugins which will be used to process the markdown.\n   */\n  remarkPlugins?: PluggableList;\n\n  /**\n   * Pass a list of rehype plugins which will be used to process the markdown.\n   */\n  rehypePlugins?: PluggableList;\n};\n\nexport type Config = MarkdownPlugins & {\n  /**\n   * The place where to find your markdown files and folders.\n   *\n   * This is mandatory.\n   */\n  pathToContent: string;\n\n  /**\n   * The place where your markdown files are stored.\n   *\n   * - if empty / undefined, your markdown files are considered to be in your current project at path `pathToContent`.\n   * - if specified, nextmd will clone (or pull) the repository and look for markdown files at path `pathToContent` in that repo.\n   */\n  contentGitRepo?: {\n    /**\n     * The git repository url.\n     */\n    remoteUrl: string;\n    /**\n     * The branch.\n     */\n    branch: string;\n  };\n\n  /**\n   * File that passes this test will be parsed by next-markdown. If `null` or `undefined`, next-markdown will ignore \"README.md\" by default.\n   */\n  filterFile?: <T extends YAMLFrontMatter>(file: File, frontMatter: T) => boolean;\n\n  /**\n   * Get more logs. Make sure it is `false` for production.\n   */\n  debug?: boolean;\n};\n\nexport type YAMLFrontMatter = { [key: string]: any };\n\nexport type Dir = {\n  type: 'dir';\n  name: string;\n  path: string;\n  children: TreeObject[];\n};\n\nexport type File = {\n  type: 'file';\n  name: string;\n  path: string;\n};\n\nexport type TreeObject = Dir | File;\n\nexport interface TableOfContentItem {\n  text: string;\n  id: string;\n  level: 1 | 2 | 3 | 4 | 5 | 6;\n  subItems: TableOfContentItem[];\n}\n\nexport type TableOfContents = TableOfContentItem[];\n\nexport type NextMarkdownProps<T extends YAMLFrontMatter, U extends YAMLFrontMatter = T> = NextMarkdownFile<T> & {\n  html: string | null;\n  mdxSource: MDXRemoteSerializeResult<Record<string, unknown>> | null;\n  tableOfContents: TableOfContents;\n  subPaths: NextMarkdownFile<U>[] | null;\n};\n\nexport type NextMarkdownFile<U extends YAMLFrontMatter> = {\n  nextmd: string[];\n  frontMatter: U;\n  markdown: string;\n};\n"],"names":[],"version":3,"file":"main.js.map"}
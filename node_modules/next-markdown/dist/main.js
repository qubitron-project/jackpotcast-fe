import {resolve as $hgUW1$resolve, relative as $hgUW1$relative, join as $hgUW1$join, sep as $hgUW1$sep, parse as $hgUW1$parse} from "path";
import $hgUW1$fs from "fs";
import {exec as $hgUW1$exec} from "child_process";
import $hgUW1$graymatter from "gray-matter";
import $hgUW1$rehypeslug from "rehype-slug";
import $hgUW1$rehypestringify from "rehype-stringify";
import $hgUW1$remarkparse from "remark-parse";
import $hgUW1$remarkrehype from "remark-rehype";
import {unified as $hgUW1$unified} from "unified";
import {visit as $hgUW1$visit} from "unist-util-visit";
import * as $hgUW1$nextmdxremoteserialize from "next-mdx-remote/serialize";
import $hgUW1$githubslugger from "github-slugger";

function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}



const $9a5384c4014709d0$export$c36cc5313cc0b5a6 = (userPathToContent, remote)=>$hgUW1$join(remote ? './.git/next-md' : './', userPathToContent)
;
const $9a5384c4014709d0$export$44c361b8ec72ef7f = (object)=>{
    if (object.type === 'file' && object.name.endsWith('.md') === false && object.name.endsWith('.mdx') === false) return true;
    if (object.name === '.git') return true;
    if (object.type === 'dir' && object.children.length === 0) return true;
    return false;
};
const $9a5384c4014709d0$export$f3e5818af2161ba8 = (path, absoluteToRelative)=>{
    const res = $hgUW1$fs.readdirSync(path).map((e)=>({
            name: e,
            dir: path
        })
    ).map(((fileSystem)=>(e)=>{
            const _path = $hgUW1$join(e.dir, e.name);
            const isDir = fileSystem.lstatSync(_path).isDirectory();
            if (e.name === '.git') return null; // no need to inspect recursively this
            else return isDir ? {
                type: 'dir',
                name: e.name,
                path: absoluteToRelative(_path),
                children: $9a5384c4014709d0$export$f3e5818af2161ba8(_path, absoluteToRelative)
            } : {
                type: 'file',
                name: e.name,
                path: absoluteToRelative(_path)
            };
        }
    )($hgUW1$fs)).flatMap((f)=>f ? [
            f
        ] : []
    ).filter((e)=>$9a5384c4014709d0$export$44c361b8ec72ef7f(e) === false
    );
    return res;
};
const $9a5384c4014709d0$export$9cffe36e64fae6a5 = (tree)=>{
    const flatRecursively = (object)=>object.type === 'dir' ? object.children.flatMap(flatRecursively) : [
            object
        ]
    ;
    return tree.flatMap(flatRecursively);
};
const $9a5384c4014709d0$export$7ae314e8753a7408 = (relativeFilePath)=>{
    return relativeFilePath.split($hgUW1$sep).map((e)=>e.replace(/^_(\s+)?/, '')
    ) // replace the first occurence of "_" at the beginning of the string with ""
    .map((e)=>e.replace(/^\[(.*?)\](\s+)?_?/, '')
    ) // replace the first occurence of "[whatever-you-want]+whitespaces(if-any)" at the beginning of string with ""
    .map((e, index, arr)=>{
        if (index === arr.length - 1) {
            const lastElement = e;
            const parsed = $hgUW1$parse(lastElement);
            if (parsed.name === 'index') return undefined;
            else return parsed.name;
        } else return e;
    }).map((e)=>e?.trim()
    ).flatMap((e)=>e ? [
            e
        ] : []
    );
};
const $9a5384c4014709d0$export$3bbd48af9aad8f42 = async (files, nextmd)=>files.filter((e)=>$hgUW1$parse(e.path).dir === nextmd.join('/')
    )
;
const $9a5384c4014709d0$export$27f89d93469652ce = (filePath)=>filePath.endsWith('.mdx')
;
const $9a5384c4014709d0$export$84bbf2c91f77d855 = (filePath)=>$hgUW1$fs.readFileSync(filePath).toString('utf-8')
;
const $9a5384c4014709d0$export$541ac630993a4c84 = (relativeFilePath)=>relativeFilePath.split($hgUW1$sep).find((e)=>e.startsWith('_')
    ) !== undefined
;




const $3f9d0ff6d28e0c8f$export$317e56953bc3cb8c = (commandLine)=>{
    return new Promise((resolve, reject)=>{
        $hgUW1$exec(commandLine, (error, stdout, stderr)=>{
            if (error) reject(error);
            resolve(stdout || stderr);
        });
    });
};



var $0702e0181ae031d6$exports = {};

$parcel$export($0702e0181ae031d6$exports, "consoleLogNextmd", () => $0702e0181ae031d6$export$fa1ad8373d0dbad9, (v) => $0702e0181ae031d6$export$fa1ad8373d0dbad9 = v);
const $0702e0181ae031d6$export$fa1ad8373d0dbad9 = (...args)=>{
    args.unshift('[nextmd]');
    console.log.apply(undefined, args); // tslint:disable-line:no-console
};


const $55a0e549eb1bc440$var$pathToNextmdLastUpdate = '.git/next-md-last-update';
const $55a0e549eb1bc440$var$pathToNextmdBranch = '.git/next-md-branch';
const $55a0e549eb1bc440$export$1fbc7d3d807e2a72 = async (pathToContent, absoluteToRelative, debug, gitRepo)=>{
    if (gitRepo) {
        const { remoteUrl: remoteUrl , branch: branch  } = gitRepo;
        if (!remoteUrl || !branch) throw Error('[nextmd] You must specify both git remote URL and branch when using `contentGitRepo`');
        /**
     * @returns The number of seconds since the last update of the git remote repo.
     */ const elapsedSecondsSinceLastUpdate = ()=>{
            const lastRepoUpdateTxt = $hgUW1$fs.readFileSync($55a0e549eb1bc440$var$pathToNextmdLastUpdate).toString('utf-8').trim();
            const lastUpdateMillis = parseInt(lastRepoUpdateTxt, 10);
            return Date.now() - lastUpdateMillis;
        };
        /**
     *
     * @returns The branche name of the last git clone
     */ const branchLastUpdate = ()=>$hgUW1$fs.readFileSync($55a0e549eb1bc440$var$pathToNextmdBranch).toString('utf-8').trim()
        ;
        /**
     * Mechanism to avoid pulling the repo when `getStaticPaths` & `getStaticProps` is called.
     *
     * This ensures repo content is the same in `getStaticPaths` & `getStaticProps`.
     */ const shouldUpdateGitRepo = ()=>{
            if ($hgUW1$fs.existsSync($55a0e549eb1bc440$var$pathToNextmdLastUpdate) === false || $hgUW1$fs.existsSync($55a0e549eb1bc440$var$pathToNextmdBranch) === false) return 'first time fetch';
            const lastBranch = branchLastUpdate();
            if (lastBranch !== branch) return [
                'was',
                lastBranch
            ].join(' ');
            if (elapsedSecondsSinceLastUpdate() > 300000) // 5 minutes
            return 'last update was > 5 min ago';
            return null;
        };
        const shouldUpdateGitRepoReason = shouldUpdateGitRepo();
        const logFromGit = [
            remoteUrl,
            `(Branch: ${branch})`
        ].filter((e)=>e
        ).join(' ');
        if (shouldUpdateGitRepoReason) {
            $0702e0181ae031d6$exports.consoleLogNextmd([
                'cloning',
                logFromGit,
                debug ? `- ${shouldUpdateGitRepoReason}` : undefined
            ].filter((e)=>e
            ).join(' '));
            $hgUW1$fs.rmSync(pathToContent, {
                recursive: true,
                force: true
            });
            await $3f9d0ff6d28e0c8f$export$317e56953bc3cb8c([
                'git',
                'clone',
                branch ? `-b ${branch}` : undefined,
                '--depth 1',
                remoteUrl,
                pathToContent
            ].filter((e)=>e
            ).join(' '));
            $hgUW1$fs.writeFileSync($55a0e549eb1bc440$var$pathToNextmdBranch, await $3f9d0ff6d28e0c8f$export$317e56953bc3cb8c(`git -C ${pathToContent} rev-parse --abbrev-ref HEAD`));
            $hgUW1$fs.writeFileSync($55a0e549eb1bc440$var$pathToNextmdLastUpdate, `${Date.now()}`);
        }
        $0702e0181ae031d6$exports.consoleLogNextmd('creating page from', logFromGit);
    } else $0702e0181ae031d6$exports.consoleLogNextmd('creating page from', pathToContent);
    return $9a5384c4014709d0$export$f3e5818af2161ba8(pathToContent, absoluteToRelative);
};










const $0705f694acbcc504$export$3b74cf49d7441ed8 = (alt)=>{
    try {
        return JSON.parse(alt);
    } catch (error) {
        return alt;
    }
};




const $3cafee7ff48ec312$export$85ff2c2b8defc222 = (mdContent)=>{
    const regexp = new RegExp(/^(###### |##### |#### |### |## |# )(.*)\n/, 'gm');
    const headings = [
        ...mdContent.matchAll(regexp)
    ];
    const headingLevelMap = new Map();
    const tableOfContents = [];
    if (headings.length) {
        let currentItem;
        headings.forEach((heading)=>{
            const headingText = heading[2].trim();
            const headingLevel = heading[1].trim().length;
            const headingId = $hgUW1$githubslugger.slug(headingText, false);
            const tocItem = {
                text: headingText,
                id: headingId,
                level: headingLevel,
                subItems: []
            };
            if (!headingLevelMap.has(headingLevel)) headingLevelMap.set(headingLevel, []);
            headingLevelMap.get(headingLevel).push(tocItem);
            if (currentItem && currentItem.level < tocItem.level) // the level is higher than the current item, so we need to add it to the current item's subItems
            currentItem.subItems.push(tocItem);
            else {
                // the level is lower or equal the the current one, we need to find the nearest upper heading
                for(let i = headingLevel - 1; i >= 0; i--)if (i === 0) {
                    // no upper heading found, push it to the root of the ToC
                    tableOfContents.push(tocItem);
                    break;
                } else {
                    const headingLevels = headingLevelMap.get(i);
                    if (headingLevels) {
                        const lastLevelIndex = headingLevels.length - 1;
                        headingLevels[lastLevelIndex].subItems.push(tocItem);
                        break;
                    }
                }
            }
            currentItem = tocItem;
        });
    }
    return tableOfContents;
};



const $7c93b2b44b99f6d2$export$e4cfe5cb4ff9af4 = async (filePath, plugins)=>{
    const rawdata = $9a5384c4014709d0$export$84bbf2c91f77d855(filePath);
    const mdx = $9a5384c4014709d0$export$27f89d93469652ce(filePath);
    return await $7c93b2b44b99f6d2$export$ebda83a15cf8580b(rawdata, mdx ? 'mdx' : 'md', plugins, {
        markdownToHtml: $7c93b2b44b99f6d2$export$b766713567a62071,
        mdxSerialize: (await $hgUW1$nextmdxremoteserialize).serialize,
        tableOfContents: $3cafee7ff48ec312$export$85ff2c2b8defc222
    });
};
const $7c93b2b44b99f6d2$export$ebda83a15cf8580b = async (rawdata, type, plugins, transformers)=>{
    const { frontMatter: frontMatter , content: content  } = $7c93b2b44b99f6d2$export$c60b055fa9c6625e(rawdata);
    return {
        frontMatter: frontMatter,
        markdown: content,
        html: type === 'md' ? await transformers.markdownToHtml(content, plugins) : null,
        mdxSource: type === 'mdx' ? await transformers.mdxSerialize(content, {
            mdxOptions: {
                rehypePlugins: [
                    $7c93b2b44b99f6d2$export$151bd5b5a61a446b,
                    $hgUW1$rehypeslug,
                    ...plugins.rehypePlugins || []
                ],
                remarkPlugins: plugins.remarkPlugins
            },
            parseFrontmatter: false
        }) : null,
        tableOfContents: transformers.tableOfContents(content)
    };
};
const $7c93b2b44b99f6d2$export$c60b055fa9c6625e = (rawdata)=>{
    const { data: data , content: content  } = $hgUW1$graymatter(rawdata);
    return {
        frontMatter: data,
        content: content
    };
};
const $7c93b2b44b99f6d2$export$b766713567a62071 = async (markdown, plugins)=>{
    const processor = $hgUW1$unified().use($hgUW1$remarkparse);
    // inject custom remark plugins
    if (plugins.remarkPlugins) processor.use(plugins.remarkPlugins);
    processor.use($hgUW1$remarkrehype).use($7c93b2b44b99f6d2$export$151bd5b5a61a446b).use($hgUW1$rehypeslug);
    // inject custom rehype plugins
    if (plugins.rehypePlugins) processor.use(plugins.rehypePlugins);
    processor.use($hgUW1$rehypestringify);
    const result = await processor.process(markdown);
    return String(result);
};
const $7c93b2b44b99f6d2$export$151bd5b5a61a446b = ()=>{
    return (tree)=>{
        $hgUW1$visit(tree, 'element', (node)=>{
            if (node.tagName === 'img' && node.properties && typeof node.properties.src === 'string') {
                const url = node.properties.src;
                if (url.includes('.mov') || url.includes('mp4')) {
                    const altData = $0705f694acbcc504$export$3b74cf49d7441ed8(node.properties.alt);
                    node.tagName = 'video';
                    node.properties.width = '100%';
                    node.properties.controls = true;
                    if (typeof altData === 'string') node.properties.alt = altData;
                    else Object.entries(altData).forEach(([key, value])=>{
                        node.properties[key] = value;
                    });
                }
            }
        });
    };
};


var $81c1b644006d48ec$exports = {};


/**
 * @param config The config for the next-markdown module.
 * @returns The next markdown module ready-to-use.
 */ const $149c1bd638913645$var$NextMarkdown = (config)=>{
    const isContentFetchedFromRemote = config.contentGitRepo !== undefined;
    const finalPathToContent = $9a5384c4014709d0$export$c36cc5313cc0b5a6(config.pathToContent, isContentFetchedFromRemote);
    const relativeToAbsolute = (filePath)=>$hgUW1$resolve(finalPathToContent, filePath)
    ;
    const absoluteToRelative = (filePath)=>$hgUW1$relative(finalPathToContent, filePath)
    ;
    const getAllFiles = async ()=>{
        const filterFileFinal = async (file)=>config.filterFile ? (async (fn)=>{
                const rawdata = $9a5384c4014709d0$export$84bbf2c91f77d855(relativeToAbsolute(file.path));
                const { frontMatter: frontMatter  } = $7c93b2b44b99f6d2$export$c60b055fa9c6625e(rawdata);
                return fn(file, frontMatter);
            })(config.filterFile) : file.name !== 'README.md'
        ;
        const tree = await $55a0e549eb1bc440$export$1fbc7d3d807e2a72(relativeToAbsolute('.'), absoluteToRelative, config.debug ?? false, config.contentGitRepo);
        const allFiles = await Promise.all($9a5384c4014709d0$export$9cffe36e64fae6a5(tree).map(async (e)=>({
                file: e,
                isIncluded: await filterFileFinal(e)
            })
        ));
        if (config.debug) $0702e0181ae031d6$exports.consoleLogNextmd('Files:', JSON.stringify(allFiles));
        return allFiles.filter((e)=>e.isIncluded
        ).map((e)=>e.file
        );
    };
    const getStaticPropsForNextmd = async (nextmd)=>{
        const allFiles = await getAllFiles();
        const file = allFiles.find((e)=>JSON.stringify(nextmd) === JSON.stringify($9a5384c4014709d0$export$7ae314e8753a7408(e.path))
        );
        if (file === undefined) throw Error(`Could not find markdown file at path "${nextmd.join('/')}"`);
        const pageData = await $7c93b2b44b99f6d2$export$e4cfe5cb4ff9af4(relativeToAbsolute(file.path), config);
        const subPaths = allFiles.filter((e)=>e !== file
        ) // remove itself
        .filter((e)=>$9a5384c4014709d0$export$541ac630993a4c84(e.path) === false
        ) // exclude draft or unpublished
        .map((e)=>{
            // compare file's nextmd with the given nextmd
            const fileNextmd = $9a5384c4014709d0$export$7ae314e8753a7408(e.path);
            const parentNextmd = fileNextmd.slice(0, -1); // remove last element
            if (JSON.stringify(nextmd) === JSON.stringify(parentNextmd)) {
                const { frontMatter: frontMatter , content: content  } = $7c93b2b44b99f6d2$export$c60b055fa9c6625e($9a5384c4014709d0$export$84bbf2c91f77d855(relativeToAbsolute(e.path)));
                return {
                    nextmd: fileNextmd,
                    frontMatter: frontMatter,
                    markdown: content
                };
            } else return null;
        }).flatMap((e)=>e ? [
                e
            ] : []
        );
        return {
            props: {
                ...pageData,
                nextmd: nextmd,
                subPaths: subPaths
            }
        };
    };
    return {
        getStaticPaths: async ()=>{
            const allFiles = await getAllFiles();
            return {
                paths: allFiles.filter((e)=>$9a5384c4014709d0$export$541ac630993a4c84(e.path) === false
                ).map((e)=>({
                        params: {
                            nextmd: $9a5384c4014709d0$export$7ae314e8753a7408(e.path)
                        }
                    })
                ),
                fallback: false
            };
        },
        getStaticProps: async (context)=>{
            const nextmd = context.params?.nextmd;
            return getStaticPropsForNextmd(nextmd ?? []);
        },
        getStaticPropsForNextmd: getStaticPropsForNextmd
    };
};
var $149c1bd638913645$export$2e2bcd8739ae039 = $149c1bd638913645$var$NextMarkdown;


export {$149c1bd638913645$export$2e2bcd8739ae039 as default};
//# sourceMappingURL=main.js.map

// src/provider.tsx
import React, {
  createContext,
  useContext,
  useEffect,
  useMemo
} from "react";
import jsCookies from "js-cookie";
import { ServerInsertedHTMLContext } from "next/navigation";
var Ctx = createContext(null);
var useCookies = () => {
  const cookies = useContext(Ctx);
  if (typeof window !== "undefined") {
    return jsCookies;
  }
  if (!cookies) {
    throw new Error("Missing <CookiesProvider>");
  }
  return cookies;
};
var CookiesProvider = ({ value, children }) => {
  const insertedHTML = useContext(
    ServerInsertedHTMLContext
  );
  const cookies = useMemo(() => {
    const map = Object.fromEntries(
      value.map((c) => [c.name, c.value])
    );
    return {
      get: (name) => name == null ? { ...map } : map[name],
      set: (...args) => {
        insertedHTML?.(() => getCookieCommandHtml("set", ...args));
        return map[args[0]];
      },
      remove: (...args) => {
        insertedHTML?.(() => getCookieCommandHtml("remove", ...args));
      }
    };
  }, [value, insertedHTML]);
  useEffect(() => {
    const commands = window.__cookies_commands || [];
    if (!commands.length)
      return;
    for (const command of commands) {
      runCookieCommand(command);
    }
  }, []);
  return /* @__PURE__ */ React.createElement(Ctx.Provider, { value: cookies }, children);
};
var getCookieCommandHtml = (...command) => /* @__PURE__ */ React.createElement(
  "script",
  {
    dangerouslySetInnerHTML: {
      __html: `window.__cookies_commands = window.__cookies_commands || [];window.__cookies_commands.push(${JSON.stringify(
        command
      ).replaceAll("</", "<\\/")});`
    }
  }
);
var runCookieCommand = (command) => {
  if (typeof window === "undefined")
    return;
  switch (command[0]) {
    case "set": {
      jsCookies.set(
        command[1],
        command[2],
        command[3] && deserializeCookieAttributes(command[3])
      );
      break;
    }
    case "remove": {
      jsCookies.remove(
        command[1],
        command[2] && deserializeCookieAttributes(command[2])
      );
      break;
    }
  }
};
var deserializeCookieAttributes = (attributes) => ({
  ...attributes,
  expires: typeof attributes.expires === "string" ? new Date(attributes.expires) : attributes.expires
});
export {
  CookiesProvider,
  useCookies
};
//# sourceMappingURL=index.mjs.map